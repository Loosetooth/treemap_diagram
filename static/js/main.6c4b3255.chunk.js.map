{"version":3,"sources":["components/treemap/treemap.js","index.js"],"names":["Treemap","props","state","data","fetch","then","response","json","setState","drawTreeMap","color","d3","range","treemap","size","w","h","div","this","refs","holder","append","attr","style","root","sum","d","value","tree","datum","selectAll","leaves","enter","x0","y0","Math","max","x1","y1","parent","name","text","legendHolder","children","className","ref","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kSAIqBA,G,yDACjB,WAAYC,GAAO,IAAD,8BACd,cAAMA,IACDC,MAAQ,CACTC,KAAM,MAHI,E,gEAMG,IAAD,OAChBC,MAAM,+FACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAE,GAAI,OAAI,EAAKC,UAAS,iBAAO,CAC/BL,KAAMI,MACN,kBAAM,EAAKE,YAAY,EAAKP,MAAMC,c,kCAG9BA,GACR,IAGMO,EAAQC,MAAkBC,MAAMD,KAEhCE,EAAUF,MAAaG,KAAK,CAACC,KAAWC,MAExCC,EAAMN,IAAUO,KAAKC,KAAKC,QAC3BC,OAAO,OACPC,KAAK,QAAS,aACdC,MAAM,QAAUR,UAChBQ,MAAM,SAAWP,SAEhBQ,EAAOb,IAAaR,GAAMsB,KAAI,SAACC,GAAD,OAAOA,EAAEC,SAEvCC,EAAOf,EAAQW,GAERP,EAAIY,MAAML,GAClBM,UAAU,SACV3B,KAAKyB,EAAKG,UACVC,QACIX,OAAO,OACPC,KAAK,QAAS,gBACdC,MAAM,QAAQ,SAACG,GAAD,OAAOA,EAAEO,GAAK,QAC5BV,MAAM,OAAO,SAACG,GAAD,OAAOA,EAAEQ,GAAK,QAC3BX,MAAM,SAAS,SAACG,GAAD,OAAOS,KAAKC,IAAI,EAAGV,EAAEW,GAAKX,EAAEO,GAAK,GAAK,QACrDV,MAAM,UAAU,SAACG,GAAD,OAAOS,KAAKC,IAAI,EAAGV,EAAEY,GAAKZ,EAAEQ,GAAM,GAAK,QACvDX,MAAM,cAAc,SAACG,GAAD,OAAOhB,EAAMgB,EAAEa,OAAOpC,KAAKqC,SAC/CC,MAAK,SAACf,GAAD,OAAOA,EAAEvB,KAAKqC,QACnBjB,MAAM,UAAW,OACjBF,OAAO,OACPC,KAAK,QAAS,eACdmB,MAAK,SAAAf,GAAC,OAAIA,EAAEvB,KAAKwB,SASLhB,IAAUO,KAAKC,KAAKuB,cACLZ,UAAU,OACT3B,KAAKA,EAAKwC,UACVX,QAE5BX,OAAO,OACPC,KAAK,QAAS,iBACdmB,MAAK,SAAAf,GAAC,OAAIA,EAAEc,QAEZjB,MAAM,QAAS,QACfA,MAAM,SAAU,QAChBA,MAAM,UAAW,QACjBA,MAAM,cAAe,QACrBA,MAAM,aAAc,QACpBA,MAAM,cAAc,SAACG,GAAD,OAAOhB,EAAMgB,EAAEc,W,+BAI5C,OAAsB,MAAnBtB,KAAKhB,MAAMC,KACH,6CAEA,yBAAKyC,UAAU,eACd,gDACA,gFACA,yBAAKC,IAAI,SAASD,UAAU,WAC5B,yBAAKC,IAAI,eAAeD,UAAU,sB,GAlFjBE,cCCrCC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.6c4b3255.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport * as d3 from 'd3';\nimport './treemap.css'\n\nexport default class Treemap extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            data: null\n        };\n    }\n    componentDidMount() {\n        fetch(\"https://cdn.freecodecamp.org/testable-projects-fcc/data/tree_map/video-game-sales-data.json\")\n        .then(response => response.json())\n        .then(json => this.setState(() => ({\n            data: json,\n        }), () => this.drawTreeMap(this.state.data)));\n        \n    }\n    drawTreeMap(data){\n        const w = 1200;\n        const h = 700;\n        const padding = 50;\n        const color = d3.scaleOrdinal().range(d3.schemeCategory10);\n\n        const treemap = d3.treemap().size([w-padding, h-padding]);\n        \n        const div = d3.select(this.refs.holder)\n            .append(\"div\")\n            .attr(\"class\", \"holderdiv\")\n            .style(\"width\", (w-padding) + \"px\")\n            .style(\"height\", (h-padding) + \"px\")\n\n        const root = d3.hierarchy(data).sum((d) => d.value);\n\n        const tree = treemap(root);\n\n        const node = div.datum(root)\n            .selectAll(\".node\")\n            .data(tree.leaves())\n            .enter()\n                .append(\"div\")\n                .attr(\"class\", \"tooltip node\")\n                .style(\"left\", (d) => d.x0 + \"px\")\n                .style(\"top\", (d) => d.y0 + \"px\")\n                .style(\"width\", (d) => Math.max(0, d.x1 - d.x0 - 1) + \"px\")\n                .style(\"height\", (d) => Math.max(0, d.y1 - d.y0  - 1) + \"px\")\n                .style(\"background\", (d) => color(d.parent.data.name))\n                .text((d) => d.data.name)\n                .style(\"padding\", \"5px\")\n                .append(\"div\")\n                .attr(\"class\", \"tooltiptext\")\n                .text(d => d.data.value);\n        \n        // const tips = div.datum(root)\n        //     .selectAll(\".node\")\n        //     .data(tree.leaves())\n        //     .enter()\n                \n        \n        // Append a legend with the different content classes\n        const legendHolder = d3.select(this.refs.legendHolder);\n        const legendElements = legendHolder.selectAll(\"div\")\n                                            .data(data.children)\n                                            .enter();\n        legendElements\n                .append(\"div\")\n                .attr(\"class\", \"legendElement\")\n                .text(d => d.name)\n                //.insert(\"div\")\n                .style(\"width\", 30 + \"px\")\n                .style(\"height\", 20 + \"px\")\n                .style(\"padding\", 15 + \"px\")\n                .style(\"margin-left\", 15 + \"px\")\n                .style(\"margin-top\", 30 + \"px\")\n                .style(\"background\", (d) => color(d.name))\n    }\n    render () {\n        \n        if(this.state.data == null){\n            return <h1>Loading data.</h1>;\n        } else {\n            return <div className=\"titleHolder\">\n                    <h1>Video Game Sales</h1>\n                    <p>Top 100 Most Sold Video Games Grouped by Platform</p>\n                    <div ref=\"holder\" className=\"holder\"></div>\n                    <div ref=\"legendHolder\" className=\"legendHolder\"></div>\n            </div>;\n        }\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Treemap from './components/treemap/treemap'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Treemap />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}